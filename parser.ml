type token =
  | VAR of (string)
  | NUM of (int)
  | LAMBDA
  | DOT
  | L_PAREN
  | R_PAREN
  | EOF
  | IF
  | THEN
  | ELSE
  | TRUE
  | FALSE
  | SUCC
  | PRED
  | ISZERO
  | LET
  | IN
  | EQ

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
open Ast 
# 26 "parser.ml"
let yytransl_const = [|
  259 (* LAMBDA *);
  260 (* DOT *);
  261 (* L_PAREN *);
  262 (* R_PAREN *);
    0 (* EOF *);
  263 (* IF *);
  264 (* THEN *);
  265 (* ELSE *);
  266 (* TRUE *);
  267 (* FALSE *);
  268 (* SUCC *);
  269 (* PRED *);
  270 (* ISZERO *);
  271 (* LET *);
  272 (* IN *);
  273 (* EQ *);
    0|]

let yytransl_block = [|
  257 (* VAR *);
  258 (* NUM *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\003\000\003\000\
\003\000\004\000\004\000\004\000\004\000\004\000\004\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\002\000\006\000\006\000\002\000\002\000\
\002\000\004\000\003\000\001\000\001\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\014\000\015\000\000\000\000\000\000\000\012\000\
\013\000\000\000\000\000\000\000\000\000\016\000\000\000\002\000\
\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\001\000\000\000\000\000\011\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\014\000\026\000\016\000\017\000"

let yysindex = "\255\255\
\107\255\000\000\000\000\000\000\001\255\107\255\107\255\000\000\
\000\000\107\255\107\255\107\255\010\255\000\000\092\000\000\000\
\000\000\015\255\056\255\076\255\113\255\118\255\252\254\254\254\
\000\000\107\255\107\255\000\000\107\255\107\255\011\255\092\255\
\040\255\107\255\107\255\250\254\250\254"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\065\000\049\000\033\000\000\000\
\000\000\080\000\000\000\000\000\000\000\000\000\076\000\000\000\
\000\000\000\000\000\000\001\000\017\000"

let yygindex = "\000\000\
\000\000\002\000\000\000\000\000"

let yytablesize = 363
let yytable = "\001\000\
\005\000\018\000\015\000\008\000\009\000\008\000\009\000\019\000\
\020\000\012\000\024\000\021\000\022\000\023\000\030\000\006\000\
\006\000\007\000\027\000\000\000\008\000\009\000\010\000\011\000\
\012\000\013\000\000\000\000\000\031\000\000\000\032\000\033\000\
\009\000\000\000\000\000\036\000\037\000\000\000\000\000\000\000\
\003\000\004\000\005\000\000\000\006\000\000\000\007\000\000\000\
\008\000\008\000\009\000\010\000\011\000\012\000\013\000\035\000\
\003\000\004\000\005\000\000\000\006\000\028\000\007\000\000\000\
\007\000\008\000\009\000\010\000\011\000\012\000\013\000\000\000\
\000\000\000\000\000\000\010\000\003\000\004\000\005\000\004\000\
\006\000\000\000\007\000\029\000\000\000\008\000\009\000\010\000\
\011\000\012\000\013\000\025\000\003\000\004\000\005\000\000\000\
\006\000\000\000\007\000\000\000\034\000\008\000\009\000\010\000\
\011\000\012\000\013\000\003\000\004\000\005\000\000\000\006\000\
\000\000\007\000\000\000\000\000\008\000\009\000\010\000\011\000\
\012\000\013\000\008\000\009\000\010\000\011\000\012\000\008\000\
\009\000\000\000\011\000\012\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\005\000\005\000\005\000\000\000\005\000\005\000\005\000\
\005\000\005\000\000\000\000\000\005\000\005\000\005\000\005\000\
\005\000\006\000\006\000\006\000\000\000\006\000\006\000\006\000\
\006\000\006\000\000\000\000\000\006\000\006\000\006\000\006\000\
\006\000\009\000\009\000\009\000\000\000\009\000\009\000\009\000\
\009\000\009\000\000\000\000\000\009\000\009\000\000\000\009\000\
\009\000\008\000\008\000\008\000\000\000\008\000\008\000\008\000\
\008\000\008\000\000\000\000\000\008\000\000\000\000\000\008\000\
\008\000\007\000\007\000\007\000\000\000\007\000\007\000\007\000\
\007\000\007\000\000\000\000\000\010\000\010\000\010\000\007\000\
\007\000\010\000\000\000\010\000\010\000\004\000\000\000\004\000\
\004\000\000\000\000\000\010\000\003\000\004\000\005\000\004\000\
\006\000\000\000\007\000\000\000\000\000\008\000\009\000\010\000\
\011\000\012\000\013\000"

let yycheck = "\001\000\
\000\000\001\001\001\000\010\001\011\001\010\001\011\001\006\000\
\007\000\014\001\001\001\010\000\011\000\012\000\017\001\005\001\
\000\000\007\001\004\001\255\255\010\001\011\001\012\001\013\001\
\014\001\015\001\255\255\255\255\027\000\255\255\029\000\030\000\
\000\000\255\255\255\255\034\000\035\000\255\255\255\255\255\255\
\001\001\002\001\003\001\255\255\005\001\255\255\007\001\255\255\
\000\000\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\001\001\002\001\003\001\255\255\005\001\006\001\007\001\255\255\
\000\000\010\001\011\001\012\001\013\001\014\001\015\001\255\255\
\255\255\255\255\255\255\000\000\001\001\002\001\003\001\000\000\
\005\001\255\255\007\001\008\001\255\255\010\001\011\001\012\001\
\013\001\014\001\015\001\000\000\001\001\002\001\003\001\255\255\
\005\001\255\255\007\001\255\255\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\001\001\002\001\003\001\255\255\005\001\
\255\255\007\001\255\255\255\255\010\001\011\001\012\001\013\001\
\014\001\015\001\010\001\011\001\012\001\013\001\014\001\010\001\
\011\001\255\255\013\001\014\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\255\255\255\255\012\001\013\001\255\255\015\001\
\016\001\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\255\255\255\255\012\001\255\255\255\255\015\001\
\016\001\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\255\255\255\255\001\001\002\001\003\001\015\001\
\016\001\006\001\255\255\008\001\009\001\006\001\255\255\008\001\
\009\001\255\255\255\255\016\001\001\001\002\001\003\001\016\001\
\005\001\255\255\007\001\255\255\255\255\010\001\011\001\012\001\
\013\001\014\001\015\001"

let yynames_const = "\
  LAMBDA\000\
  DOT\000\
  L_PAREN\000\
  R_PAREN\000\
  EOF\000\
  IF\000\
  THEN\000\
  ELSE\000\
  TRUE\000\
  FALSE\000\
  SUCC\000\
  PRED\000\
  ISZERO\000\
  LET\000\
  IN\000\
  EQ\000\
  "

let yynames_block = "\
  VAR\000\
  NUM\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 41 "parser.mly"
           ( _1 )
# 214 "parser.ml"
               : Ast.term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'appTerm) in
    Obj.repr(
# 45 "parser.mly"
                                ( _1 )
# 221 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomTerm) in
    Obj.repr(
# 46 "parser.mly"
                                ( _1 )
# 228 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 47 "parser.mly"
                                ( App(_1,_2) )
# 236 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 48 "parser.mly"
                                ( If(_2,_4,_6) )
# 245 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 49 "parser.mly"
                                ( Let(_2,_4,_6) )
# 254 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 53 "parser.mly"
                ( Succ(_2) )
# 261 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 54 "parser.mly"
                ( Pred(_2) )
# 268 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 55 "parser.mly"
                ( IsZero(_2) )
# 275 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 59 "parser.mly"
                         ( Abs(_2,_4) )
# 283 "parser.ml"
               : 'atomTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 60 "parser.mly"
                         ( _2 )
# 290 "parser.ml"
               : 'atomTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parser.mly"
                         ( True )
# 296 "parser.ml"
               : 'atomTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
                         ( False )
# 302 "parser.ml"
               : 'atomTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 63 "parser.mly"
                         ( Var(_1) )
# 309 "parser.ml"
               : 'atomTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 64 "parser.mly"
                         ( Num(_1) )
# 316 "parser.ml"
               : 'atomTerm))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.term)
